hello everyone and welcome to yet another hit save podcast this time we're doing a deep dive into the
keitai phone game japanese phone game preservation that's happening and i got four
lovely people with me here today we got ellen cooper who's also a board member here at hit save
we got stephanie garorski uh who is the founder and uh maintainer of squirrel jme we got rockman
cosmo also known as max and we got yubi hi everyone hello hi hey how's it going so before we kick off
with all the technical stuff and all the games that you have preserved in the past year i would
like you all to introduce yourself to the audience here so we can start off in the same order as we
did in the introduction here so ellen sure hi i'm ellen i am a board member for hit save i am also
the founder of keitai wiki which is a wiki dedicated to recording information on japanese phone games i
have involvement in the hardware and software parts of um feature phone hacking and i also
just do a lot of general organization um with regards to the wiki and to the community awesome
stephanie uh yeah so um i'm stephanie and i work on scroll jamie which is a java me8 virtual machine
and i've been working on that since 2016 and pretty much i've been working on dojo support and mint piece
support so western and i guess eastern phones and that's been going pretty well uh keitai wiki wise
um i don't really do much apart from you know sometimes i help out yubi when he's doing the reverse
engineering so basically i know lots of java so awesome awesome and uh max hi yeah i'm max also
known online as rockman cosmo um i'm a game preservationist who specializes in japanese feature
phone games so i'm kind of like like the leading advocate i guess for the preservation of these games
but i've also done some of the preservation work myself but yeah since i think like since the imo
shut down in november 2021 i guess i've dedicated too much of my life to preserving these kinds of
games it's kind of consumed me but it's also led me to you know come across all these wonderful people
that are on these podcasts and yeah i continue to spread awareness and actually last summer as i'll
discuss later i actually spoke at two conferences on this so it's been a wonderful past year
awesome and last but not least yubi hey how's it going uh yubi or sometimes you might see me as a
yubi app uh on the socials uh kind of the i don't know new guy to the team i guess the best way of
putting it uh i don't know how long i've been here maybe like almost a year now probably eight months
nine months all around there uh primarily focus on a reverse engineering of server-based
uh i mode games or even just tool creation of any kind uh previously mostly i'm a translation guy
doing all the hacking for getting translations from japanese english and then kind of took my skill
sets and uh use them for good now on the keitai side so so what i do awesome awesome so i wanted to dive
into the keitai wiki a bit and start off there so ellen you started the keitai wiki a while ago
yes i started yeah sorry i started it in august of 2023 so it's getting close to uh two years about a
year and a half so what is it what what's the keitai wiki about the keitai wiki is a collection of
information about japanese feature phone games applications and other related media it's a place
that records a lot of this information in english which is not written about on almost any other
sites so it's a treasure trove for anyone who wants to get into preserving japanese phones and
phone games absolutely but that being said even though it's getting close to two years old the
wiki is definitely still in the early phases that's still a lot of pages that need to be made there are
thousands of games released and while we have a lot of the important ones and a lot of the ones
that we have found on the wiki there is still way more to be said and way more to be written and added
yeah looking at the keitai phones and the games that were on these phones they weren't really here in
the western part of the world at all they were over there in japan uh had a an immense catalog of games
and fantastic really really cool phones as well that um were very advanced for the time yeah um
on that note there was actually one phone that was released in the us uh i forgot what the model was
exactly but it was like the only dojo phone that was released here and they called it m mode instead of
like i mode but uh basically they wanted to uh actually found that out from there's the
video game history foundation they made that archive with all the information so i did a search on there
and then i found that that phone was actually talked about in one of the game magazines oh so that was like
really cool that was really cool so like that archive popped up and just learned something from it
pretty quickly um obviously it was a business oriented phone and you know that was the only phone and
after that uh it didn't do anything else with it so it kind of was a a flop
uh bad uh i've been watching all the uh the clips that you all post about uh the games that you have
preserved and it's so it's so cool to see all these games that were made for phones before we had the
iphone and android phones and things like that and the way they run they run really well many of them and
they're fantastic ports some of them uh many of them are original games so max maybe you can fill us in
on some of the notable finds that you have done in the past year 100 yeah there have been so many
crazy finds it's like i had a i was writing this whole notes for myself here and i realized just how
many games we found in the past year and actually recently we did pass the 800 mark for idmo games at
least so now over 800 i mode games are preserved so that's that's unbelievable because if you remember
only like two years ago it was like zero so that's the incredible growth but yeah on onto this more
specific games um let's see so i want to start from last may and go to the present so may uh we had the
easy web versions of the rockman.exe games preserved so if you remember uh megaman battle network had two
original entries on katai and we had preserved the imode versions but there is a competitor service
by kddi called easy web and that's actually where those two games were originally released
so thanks to the expertise of craze we were able to extract those games but also another side
application called battler's tower which had like online leaderboards but because that has a network
check we have not been able to crack it but it's kind of crazy that we found another copy of those
already rare games then a month later in june we partially preserved a game called oi katamari
damasi kun and if you remember the psp entry in the katamari series me and my katamari the end credits
has this mini game where you're rolling a katamari but it's like in this pixel style and it's in 2d
and you and you go side to side basically and you go along this long stage so basically they said what
if we just take that end credits mini game and make an entirely original game out of it by just adding a
bunch of you know original stages and that's what oi katamari damasi kun was so i i forget how many
stages we have in particular but it's not all of them but we do have a good amount so we did preserve
that in june and then in july if you remember from two years back naoya shinoda was the first guest on
here alongside with me um he scored a massive square enix imode game hall after like years of
negotiations so he preserved about 19 games um including a partial copy of before crisis final
fantasy 7 which uv will talk about later that's its own can of worms but also the full copy of
kingdom hearts coded dirge of cerberus lost episode now those two games are missing their sd card data
but actually as i speak right now um naoya is working on obtaining that sd card data but we also
found numerous kingdom hearts imode mini games um even final fantasy 7 snowboarding which was actually
the first imode game to have its leaderboards restored um thanks to uv again um and then also
even the full imode remake of of saiken densetsu which was a game boy game but they actually had a full like
color remake of it that was exclusive to imode and then let's see what else do we have here in july
um ellen preserved tetris dj which is a rhythm based tetris game uh yeah she she's extremely proud
of that one it's a really fun game in and of itself um in august uv preserved the entirety of professor
layton and the mansion of the deathly mayor that was an original professor layton um game and that was
it's actually canon to the series too which is very interesting um interestingly the phone that he
preserved it from it it was horribly burnt like the screen wasn't working so i said it looks like it
got burnt in a house fire but then all the gaming news websites they saw i said that and they reported
it like it was fact so now everyone thinks the phone did survive a house fire but we don't know for
sure um yeah then september uv once again preserves nine capcom imode games including an original imode
capcom rpg called your planet where it's like a spherical 3d overworld so it's kind of like
if you walked around a planet in mario galaxy that's kind of like your overworld basically with
traditional turn-based combat then december before crisis strikes again except this time the demo is
preserved from um an easy web phone by the one and only craze and it turns out that the data from
that can be combined with the documo copy as uv will also get into and yes i mean there's so many
more but if i had to pick one that was recent it would have to be an anonymous user preserving the
entirety of xenosaga pied piper this was this is a massive find because it was six separate apps but it
is a canonical story set i for i think it's before the first xenosaga game but people have been
searching this for this for so long that after i posted the news a lot of people told me that they
legitimately like broke into tears upon hearing it like i didn't realize that so many people had
wanted this game for so long so that was very recently earlier in march which is when we're recording
this but yeah it's very recent someone's already working on a fan translation of it that's amazing
it's it's just been an incredible time i could go on forever about the games but yeah those are some
of the best hits i mean just you're talking about games that have been locked away i think we maybe we
should take a little step back here because the when we talk about i mode and the phones that we're
talking about here they many of them are reliant on the network to be available and the i mode network
was shut down years ago um so you can no longer download these games uh and they are on phones
that have been stuffed in drawers essentially and and uh forgotten by the world for over a decade
exactly so finding them and being able to restore them and show them to people is just a wonderful
thing so thank you everyone for everything that you're doing here so tell me a bit about the latent
game that was saved there uh because that was um a a full latent game and you said it was canonical as
well yeah i'm not sure about this i guess the specific things i actually have not uh played a
latent game myself so i'm not the best person to be talking about this but um but it seems like it
i think it takes place between some of some of the ds games but yeah interestingly in comparison to
some of the other games like they could have made this a server-based game because as you said
um like the average size for an imode game if the audience doesn't know was one megabyte which is
that that's not very big basically so a lot of games had to resort to creative ways to i guess
overcome this limit so some of them as we have mentioned like rockman dash five islands or kingdom hearts
coded use the sd card for the extra data and some games like before crisis were jerks and decided to
just rely on a server for the whole thing but professor layton and as well as actually xenosaga like
i mentioned earlier they decided to split their game into separate apps so each so there i think
there's six chapters in professor layton in the mansion of deathly mayor and there's one app for
each chapter so basically that makes preserving it a little more difficult because you do have to find
a phone with all six chapters but lo and behold uv's luck you know it just happened to work and
he happened to find a phone with all six chapters on it and the same goes for xenosaga that was also
also three chapters but each chapter had to be split into two apps so that's how that game came out and
yeah they apparently released a remix version of it too um that was called a it was called it had the
same name but it had a remix at the end and that one actually has different puzzles slightly better
animations and even slightly different dialogues so we have not found that version yet but there is video
footage of it online but it's also interesting just think like the fact that they would re-release an
i-mode game you know it's interesting yeah those during the time i had a string of good luck i felt with phones
yeah and also um on top of that there is the uh you have the scratchpad and stuff so it's kind of like
dlc so scratchpad is like the storage space for the software and normally you'd use it for like
game state or you know whatever else like contacts or whatever else and you know whatever
software software to keep it state but since the size of the programs were pretty limited
and the scratchpad could be much larger basically what would happen is that they would download from
a server and cache that information in the scratchpad and then load it from that scratchpad
so basically if the app was downloaded but never ran then it would never have gotten that scratchpad
initialized and that's another issue as well with a lot of the software and titles so basically
basically there have been cases where we found you know incomplete titles
essentially and sometimes complete titles that were you know trial locked
um oh one thing i want to add is um so the remix version um i don't recall if you said this in the in
the same order but the remix version is for the professor laden there is not a remix version of
xenosaga pied piper yes yeah for a moment i thought that's what you said and i was like what no no i'm not
gonna drop that on you guys no way i'm gonna do that
so uv i wanted to dive into the the burnt phone here that max was talking about a bit uh and that
was the game where the latent game on it so when you when you got that phone what did you what did you
think was going to happen uh let's see so this is back i don't know how many months ago that was but
back when i was getting a string of a lot of lots and so i think roughly probably got two three hundred
phones in some lot that i got and a lot of those phones i mean you know they all look normally used
they all just kind of somebody used them in their lifetime right but this one in particular was just
kind of out and i actually had set it to the side for quite some time because it was not
booting correctly to which uh normally what i do is if i get a phone i'll try and turn it on see what
apps there are and then there's nothing of value i set it into a box that is kind of my junk box
right and then if there's things on there that i need i put it into a dump pile oh this phone i set
aside there because it didn't turn on at first but uh because we felt like we had to make sure and
normally when i do this i'll i'll put the phone in to get dumped and so ended up we actually dumped
this phone um before i even got it working and turning on uh and the condition of it was not
great uh and so this is kind of where the meme of a house fire phone came because actually if you look
at the phone physically it looks like it had some charring of some sort to it or or it was in a very
nasty place that gave it that type of look um and so you look at the phone you look at the connector
port for uh uh where the charger cable goes and our debug cable goes it was uh not so nice and so
with a little bit of cleaning and uh just was able to plug it in thankfully it turned on and we were able
to dump the contents but of course when i dumped it i had no idea what was on this phone that i was just
expecting there to be nothing but if i recall this is the phone that gave us lots more than just
latent as well i think it had tons of other namco and konami not konami but uh namco games on it as
well uh so it was quite a gold find for us especially with all the latent games and uh what ended up
happening at you know for whatever reason unbeknownst to me i i guess there was a bounty for the first
person who would find the rest of the chapters uh the professor latent games and
guy hits me up he's like hey you got fifteen hundred dollars to your name and i'm like i'm
sorry what that's like hey he's like here's fifteen hundred dollars and i was like yeah that's crazy
first off why you have a bounty for that but i mean loyal fans what can we say i'm sure somebody
would be willing to put up a bounty for before crisis or something right but latent fans um
so yeah i met a bounty and then i just didn't feel right for just what i do is just i bought a
lot of phones i just happened to find it uh so sure most people know but we ended up donating that
money out to hit save uh just because it made more sense uh for it to go somewhere and be used
besides me just sitting on it and not really needing the money because we're already spending our
own money to buy these lots so at the end of the day if uh if it goes somewhere else and gets used better
so it's a better cause it's really really appreciated so i wanted to thank you in person
as well so thank you no worries no worries but yeah that's kind of the story of that phone i mean
and i don't remember who it was but there was one person in the discord that kind of said oh it looks
like a house fire like it survived a house fire or something like that and somehow every new story
just kind of picked up on that of that case because i think cosmo uh had put in his uh his uh
ex post of the saying look like it survived a house fire and therefore everybody kind of went
off on that and so it's now deemed the house fire phone so we'll never forget it
that's awesome now i will say that i think it is quite obvious uh i think most of us honestly we
look for these type of phones uh because somehow they always end up giving us the best things uh
they went through a hard life and somehow if they went through a hard life they normally have some
goods on them and that's kind of panned out to be honest i feel like every time i've seen a phone that
snapped in half they sometimes have something on them a lot of reason for that is because
if the phone is broken it's difficult to initialize the data yeah yeah like you can't just wipe it so
that's uh that yeah that's true yeah that makes a lot of sense
so with all these games and the data that you preserve from these phones
stephanie you're working on a project to actually be able to play these games not on the phones but
on a computer so can you tell us a bit about squirrel jme and how it works and and the work you've
been doing in the past year yeah so squirrel jme is a java me 8 virtual machine which basically
there's your desktop java and java me is basically a subset of that so much smaller for embedded
devices like phones iot devices you know like fridges and stuff like that and basically these
phones are kind of just like the extension of that like what could run on like a fridge
or something like that right so pretty much from that the things that i've been doing is that
a lot of the times with these older games is that they're made for older phones and devices
right and there's a lot of assumptions about kind of like how the processor acts and so i mean not to
kind of complicate things but basically we've advanced in cpu technology so you have like
16 core cpus now with hyper threading and stuff like that you know super duper gpus
and the thing is these phones back then one thing is that they just have one single cpu
just executing everything you know just next to each other right code wise
and one of the big issues with that is that because of the advances in technology
that a lot of this older software runs differently if you were to run it today on modern cpus and modern jvms
because everything's just kind of like a moving target so my goal with squirrel jamie is essentially
to have kind of like a snapshot of sorts so that you can like experience these games right and
essentially just be able to play them for example so with regards to that uh there's for example the megaman
games and then there's also like tetris game i believe as well where essentially it will just break if you try
running it on kind of like an environment that it wasn't made for it just won't run properly
and for squirrel jamie i kind of like force it into that box to where
where it's closer to how things were back in the early 2000s in the mid 2000s and that like increases
compatibility with the software and that's a lot of the stuff that i've been doing in the past year
is uh pretty much kind of like that
you know very hard integration
so i know in previous podcasts we've been we've talked about the um sdk i believe it was i can't
remember what it was exactly but yes exactly the sdk emulator so this is
the um uh what you're creating here is something that is way more robust way more performant
yeah and yeah just available for more people yeah basically uh you'll be able to at some point
you know use a game pad with things and play with it because the sdk is just it's made for developers
it was never intended to be used you know to actually play the games
and you know i am hoping to get like better audio support more performant audio support and kind of just
like making it a much better experience of course you know that stuff takes time so i'm hoping this year
i can get something which it'll be interesting um you can actually sort of do things now with the
standalone version which does actually kind of run stuff so that's pretty neat so that's a call to
action to any java developers who love to work on audio to come and help out yeah basically
if there's any audio so of course audio is not like the priority right now so that'd be a little
bit more later on because right now the priority is kind of just getting the more important bits if that makes
sense so that's great um i see here in our podcast notes as well something about nano coat
you want to talk about that yeah so nano coat is the virtual machine i'm working on that is written in c
and that would be running on retro arc for example and that would be running on say you know your phone
or your desktop or maybe even like the ps2 your 3ds because uh retro arc is kind of like on everything
so i am part of retro arc team you know it's mostly just volunteers for the most part
but it's basically the native port and it's kind of like so i have spring code which is written in java
and that's kind of like the baseline virtual machine that i wrote initially you know completely
in java and now i'm working on a native c1 that'll be more portable and cross-platform to where
you don't need a host virtual machine to actually run the virtual machine so essentially you know you
can run it on a 3ds or your desktop or your phone and then you won't need to have this very huge
cumbersome java installation just to be able to play the software and the thing with the sdk emulator is
that you also have to have that you know cumbersome desktop java to be able to run stuff
so essentially nano code you know nano being small and it's essentially just going to be a leaner virtual
machine so this is going to be a very user-friendly method of being able to play these games going forward
yeah or that's the goal at least yeah that's the goal and if you're using like the uh retroarch front
end then uh there'll be of course like controller support and then i'll have to figure out like
save states and stuff like that which will be interesting because java itself doesn't really
lend itself to such things but i think i can make that work uh that i am very very excited to see
how you progress with this because that would make it um a lot easier for for people to actually try
these out the games that you have preserved and um yeah make make some deep dive videos on them and
enjoy them yeah but it does involve lots of uh research yeah but like most of the time
my time is spent just like researching and then developing and then also refactoring because
because this is such a big complex project you know it's the you have like the 95 of projects
this is like the five percent of projects where no other project kind of how you would do that applies
so everything has to be done differently and i know
i've said that you know squirrel jamie would be out like last year this year but the thing is
you know i do work but also as well there is a lot of research and making sure that everything's done
right the first time right the first time you know so that way it's easy when things get broke they're
easy to fix which you know they are thankfully yeah so and also as well um to kind of get like that
kind of experience where it doesn't like frustrate you to use it if that makes sense
yeah yeah i think that makes a lot of sense and i i love that you're working with the retro art team
and trying to make it more user friendly but i absolutely understand there's a lot of research going
going into this project and you do have a day job as well yeah which is uh working on medical devices so
very different very different yeah and also pretty important so and uh
uh sometimes i get off work and you know i'm kind of tired so totally get that yeah but thanks have
been going well that's awesome so what have been the the most fun thing that you have done in squirrel jamie
um lately um most thing the thing that you think either a quirky thing that you finally figured out
or something that made it run better or something like that um there's actually something silly
uh it turns out that i had well if you knew java bytecode there is an instruction called table switch
which is basically
a jump table of one two three four five so say like if one go to this address if two go to this address
etc right and uh that was implemented incorrectly um i was running some dojo software which ended up crashing
uh because uh i was running it in spring coat which is very uh pedantic about everything right
which that's the purpose of it so this one dojo software kind of just
broke and then it's just like oh i implemented it wrong
oops oops that's great that's great to find though um yeah and it's just like it worked
for five years without issues and just this one random dojo software just breaks it
that's funny it's it's hilarious i love that
so yeah it's just like uh kind of like checking all this dojo software is kind of just like
interesting and kind of just has improved squirrel jamie in general so and this also helps out you know
western software as well like the mid p games because it just you know it's more surface area for testing
and i guess probably one of the most important things is like testing and making sure things work
yeah yeah for sure i mean you can you can implement things but if they don't work they don't
work so yeah testing is really important yeah and implementation wise i do kind of
uh fail fast which is a programming term to where when you encounter a failure state or an unknown or
undefined state then the program terminates so essentially that means
squirrel jamie when it knows it's about to enter an unknown program state then it'll just terminate right
there rather than continuing which makes things easier to buck to debug easier to implement because i know exactly where that happened and
that has kind of just like
made things so much easier than doing stuff like game specific hacks and stuff like that
that which is uh you know untenable when you have thousands and thousands of titles yeah yeah you want to
you want to focus on what what gets most of them over the finish line there yeah pretty much
this is awesome so um squirrel jamie where we at hit save we're super happy to
uh help with some of the funding for the the development here so i'm super happy to hear about all the yeah and
thank you so much progress here it's it's super fun we we love open source projects and yeah we we of course utilize
a ton of open source projects ourselves as well so seeing the progress here is fantastic so thank you so much
and the funding's been put to good use it's uh being used for the cicd which is basically just
constantly building and then testing squirrel jamie with all the tests i wrote you know to make sure
things don't just break out of nowhere and that's been making sure that you know things continue to
progress well not break and it's actually kind of difficult because even though i'm an open source
project you know run by a single person i kind of appear to be like a large i mean it is a large project but
like resource and usage wise it's very rare for a project you know as mentioned previously
and it's kind of hard to actually find companies that are actually even willing to even help out
you know so i'm really glad that you at hit save have helped out so really helps
yeah we we love it and so so thank you again thank you i wanted to uh dive into
the tetris dj game ellen if you're uh if you can explain this a bit i i because it doesn't make sense
to me in my head how does a tetris rhythm game work okay so there are a few things to mention about
the game the way that it was found was actually kind of incredible but also not incredible basically
i was just looking i took the debug cable i plugged it into every single phone i had
this one phone lit up which i did not expect because it was a casio phone and usually only the
nec and panasonic phones light out and light up turns out casio casio phones were made by nec
in the later years so it was actually just an nec phone i could not open it so i extracted the data
like it was an nec phone and it had tetris dj uh what is tetris dj tetris dj uh is a game
that includes a dj mode so you can play regular tetris in it as well in the dj mode the goal is to
drop the pieces on the beat and if you drop the pieces on the beat you get extra points
that's basically it you can kind of emulate this in um the uh softbank proprietary mexa emulator
however there is a good deal of lag that makes it a bit tricky to play
maybe i could try running it
that could be interesting because uh the softbank games though those aren't doja they're actually
closer to mid p and there are already some other emulation projects that can run
a few of the games from softbank the only problem is they can't emulate the audio so tetris dj with no
audio is a lot less fun i bet just uh make up the music in your head
have a game boy next to you maybe uh play some tetris tunes yeah
so i wanted to dive into before crisis because that's a game that has been talked about in
multiple of these podcasts and uv you have been um a star here essentially making sure that that was
preserved properly and you also have some um
uh you've had some challenges preserving some server-based imode games um which obviously
before crisis comes in there so can you tell us a bit about that
yeah so uh i mean what isn't there not to say about before crisis i think
is it probably the most recognizable imode game probably it's probably the true statement i would
say so yes um before crisis is one of those games that everybody kind of knows about everybody wants
to play uh kind of almost to the vein of xeno saga but just not with the final fantasy name attached to
it is uh thanks to naya as we spoke earlier that he was able to find a copy from us so you see that
we even have the ability of uh looking at the game today or even trying to preserve it
um and that's honestly kind of where my story starts um this is kind of how i came into working on this
is really that uh now you have preserved them and i just so happened to get uh recommended
um something from cosmo uh a post he made that hey we preserved all these amazing square enix games
but the one that everybody wants is uh before crisis just doesn't boot doesn't run you know
it has a lot of issues inside of the sdk emulator today and so um correct me if i'm wrong but i think prior
to uh before crisis uh nobody on the team has really tried to work on reviving any of the server
mode games or server reliant games um there so i think that's the case yeah that was the case
yeah 100 it is and so yeah i mean not to say that it's my forte but i mean i've been doing
fan translations and reverse engineering for roughly like a decade now and uh one of my ultimate goals
at the end of the day has always been to bring back a certain uh mmo called tales of attorney online
and so i've dabbled uh quite a lot into reverse engineering network protocols and um honestly
i i wanted an easier project uh for something to work on because working on mmo is kind of a next
level reverse engineering project and that's kind of where these not simple but more simplistic uh
mobile online reliant games come into place um so the first story with uh before crisis really
started with uh us just trying to get the game to boot because the second you even boot the game it
automatically goes in and and tries to make a bunch of network requests and start downloading data of
that nature and so um really trying to figure out first off uh what data it's requesting uh what type
of data is even trying to download and so um what ends up being is that just uh to start off the game
there's roughly like five to eight packets depending if that's a new uh new register person or a saved
game um that it will go through to some authentication checks make sure you have enough money to play the
game they'll start downloading some files um that are kind of like the main menu files that it needs to be
able to load the menu uh then it will get your saved data which that saved data is all encrypted as well
uh and so trying to figure out everything that this game did was just kind of a mess at first
one of the beauties of working on this though is thankfully that um we sometimes get lucky that the
games we reverse engineer for the k-type games they're not obfuscated and what that means is that
we can get in and look at the code and we have the original naming scheme of every function and that they
use to make these games and thankfully before crisis is one of those games where it was not
obfuscated in any ways that significantly speeds up the process of knowing what function is doing
what so if they name a function and it says download save well i know that function is downloading the
save data right so other games they'll be obfuscated where they'll just be a single letter character
called a capital a lowercase a capital b capital b or something like that right and so
now you have no idea what these do until you really dig deep to figure it out but uh four
crisis was nice to us in that ways so i think it was literally maybe only like a day or two it took
me to get to the main menu of the game took a bunch of figuring out how the file system worked in that
game which i know stephanie kind of spoke on regarding uh the sps before real briefly before
crisis does the same thing it chunks up the sp and stores certain types of data in the sp for example
the first slot of that sp is always the main menu data and it will never change it will always be
that thankfully unless there's a new version of that main menu data it'll always be that but as you go
down through the chunks that were allocated you find out that some chunks were reused for multiple
purposes like we have chunks that are for maps we have chunks that are for uh media we have chunks
that are for uh music things of that nature and so those constantly get overwritten deleted reused and
so we only have a limited amount of data that we actually get out of before crisis specifically
so thankfully we were lucky enough obviously to have an sp that had some data in it
so we have the main menu data which allowed me to finally get past a bunch of the network requirements
and get the game actually booting into the main menu um once figured that out we're able to realize
okay what data do we have today because that was the next problem is what data do we have once we
figured out what type of data we actually have um in the sp we were then able to realize okay
okay the last person or the last person who played this game they stopped at um the reno training
mission so they played the reno training mission and that was the last thing they ever did on that
game therefore that is the only thing we are able to get working today uh inside of before crisis and so
this is now the story of before crisis is there are roughly three to four hundred different types of
files based off of my estimates that this game needs actually have a full operating game um
unfortunately that means we need roughly three to four hundred phones worth of data and that's not
accounting for the fact that we are bound to get duplicates of the same data right and so this is kind of
where we are now trying to piece together things and trying to create our own things and that's kind of where
i've um built a lot of tools to mitigate some of these issues knowing that we're never going to be able to
make this happen um so again we originally started off with only having the reno training mission
and from there i worked with nalia to kind of figure out um he was able to give me some ideas like hey
back in the day um the beta version of this game they had a map in the shimmer hq that they actually used for the
the battle area and i was like okay that's cool he was able to provide me some tile sets for that and
i was able to fully reverse engineer how the map files work in this game um that's on a byte to
byte level so hex right and so with that knowledge i can now build our own file or game compatible map
files for before crisis and theoretically i can build any map it i could put you on mars or whatever and i
i could put you in there and it would just load it because they think that's an original um you know
before crisis file at this point because i'm the one that created it pipe for pipe perfect so yeah you're
not just preserving the game you're you're be you're able to mod it um essentially yeah i mean pretty
much that's exactly uh what i ended up having to do is uh not only just for that we now have the ability
of making our own uh material files as well so the material files um real simply they're just a bunch
of animation data with images attached to them and so um really it's just figuring out how did the
animation system work and once we kind of figure that out we can now make those and so the whole
purpose around this again wasn't that we want to mod the game it's simply that we just i knew there's no
way we're ever going to get all this data to make this a real game and so with the more dumps we get
of the game it helps me understand more about the file system structure and bite-to-bite stuff of how
these individual files work which allows me to replicate these a lot better because we have source
material well we have pictures and videos of other stuff of the game that's been documented out there
that we can pull images from or something of that nature to then be able to inject them into the game
today and um you know we've already had majority of the text already translated into english at this
point as well so once we're ready uh for that we'll make sure everybody's able to play the game
because that's obviously the next step is ensuring um all the text can be done um let's see after that
um we had made some quick discoveries that um there are two extra apps with before crisis that come
with it one we call uh extra or really it's the weapon d mode which is a completely separate like
multiplayer style mode that was made in this game kind of almost like your pokemon go style where
you would travel the world and based off depending where you were at it would kind of give you a
different um was it like a different like enemies that would show up for you to attack or something
like that in that mode and that would all change the story that happens in that mode in particular
and then we also have um the golden saucer app as well which of course is famously just a bunch of
mini games uh related to final fantasy 7 so the boxing the snow boring um what are the ones that
have in there uh trogo racing as well of course so all that stuff's kind of in there and so as we
dug through those apps and i had to again figure out uh the network protocols reverse engineer how
they even got all their data in there how they're all sent uh and we're able to find out that hey we
do have some data um for this as well so we're able to bring back the arm wrestling mini game for
the golden saucer so that's fully functional as well and we even have the cross app launching working
correctly now which is amazing so you can load into the game completely just like you originally would
you can go into the golden saucer app or it was launched the golden saucer app actually and then
you'd be able to go into the mini game play it it would save your data just like you were just playing
the game would update how many uh what your high score was put on leaderboards things of that nature so
all that stuff's working um golden saucer apps not too bad i think we need probably about 20 files
for that to actually be fully complete um roughly and then weapon d mode is going to be another chunk
of data that we probably will never get because that is a mode that is actually highly undocumented
uh again since that's kind of more of a an asymmetrical multiplayer mode as well so
yeah exactly yeah i mean it's like the if i remember correctly the weapon d mode you had
mentioned it depends on your location right so it's like if you're in for example hokkaido which is
all the way up north in japan you will correspond to like icicle in in like the actual like in-game
ff7 world you know so like there are there are some things corresponding there and i guess
other detail i wanted to add was the whole cross app launching thing um if you remember earlier i had
mentioned oi katamari damasi-kun um that that's interesting spinoff of that 2d credits mini game
and that i think was the first uh game that we had preserved that had that functionality so basically
you would have that main application and then if you wanted to access those uh those extra levels it
would launch its own app and the app had a different name and that app would have like i don't know 10
different levels and you would and you would go into that so correct me if i'm wrong uv but i think that
game might have helped you i think i guess restore that kind of cross app thing because at least you
have an example now to work off of yeah in some ways what ended up being is that the doja sdk that we
particularly use today um the way it operates and some of the calls are a little bit different from when
they're natively on a phone so we just had to modify them so they would work and yeah uh katamari
katamari damasi was kind of the one that pointed that out to us
so i think that's kind of primarily the journey of before crisis day kind of really summed up i mean
it's kind of been the game we've all been wanting to work on and you know i talk about it how
hey we have this game working people can kind of play it in some way but um it is still
we don't have it publicly available for people to actually currently play on the server and that
really comes down to a couple things which is if i make it publicly available it's great because at
least people can go see what there is um what little of there is but really it's simply the matter of the
fact that we want at least when i've talked about we want something substantial to bring out and let
people do more so than just a single mission right and so this is um where the w51h uh copy of the game
came in which is from a completely different platform um which is brew so different than doja and the
way that game had worked is uh slightly different in the matter of fact that the brew platform from
my understanding doesn't have any limitations in terms of file systems uh file storage space so
it kind of just stored things more uncompressed and actually things look better because they're not
using gifs they're actually using uh bmps so they're actually a better image format and the files
are all structurally the same but also not the same because when you look at the network side of this
game it always sends out two different type of network calls one of them i call a common network call
and one of them might call a phone specific network call so the game is very aware of what type of phone
you are using at all given times and it will only request data for that specific phone so what that
means is that there are certain file types that are cross-compatible against all phone types regardless
if they're brew um easy web or kddi or even doja or yahoo for even i think there's a yahoo version
um and then there is the phone specific ones where again those files are only meant for certain
types of phones so the w51h um has both right so in the what it doesn't have an sp but in the file
system structure itself there are common files and there are the phone specific files the common files
are great i can drag and drop them into the current system they work and load just like we normally
would want them to but when it comes to the phone specific ones which are the ones that really
matters those are like our character images are a scenario data and our um character data so that's
going to be um how many characters are on their screen with the sprites their data like how much hp
they have attack power things of that nature right so all of these are more phone specific type because
they're different image formats is primarily what it comes down to and so knowing we now had the full
chapter one my job was to find a way to convert all of those files to work on doja because that is
the server system that we have working today and the best sdk with audio support that works today as well
now i would like to say i was fully successful with that but unfortunately i'm not um we are still
at a standstill with that i was primarily able to get let's say 80 of them converted with a lot of them
working today for example the fire material spell is a phone specific thing but i was able to convert
all of those files um that are inside of this proprietary file to work with the doja so what
that means is we now have the fire material which sounds crazy but again we now have one of the three
basic materials uh available now in the game so that gives us roughly four materials we now have access to
um that work but the biggest thing holding us back now is the bruise way of handling audio files
the audio files are handled completely different uh versus doja and unfortunately what that means is that
um even with me trying to what i like to say fake the data the game will still refuse to load any
um data regarding the scenario because it does not have the appropriate audio files in place and what
that just ends up happening is that the game just will refuse to work even though i've converted everything
inside of there we just simply do not have a method today to convert the audio formats between the two
so i've reached out to a couple people uh that are way more familiar with audio stuff than i am and
they're working on something so potentially maybe in the future we'll have a way of making this work
but as of right now the only way still today to play um final fantasy before crisis is the
emulator with no body support but it's getting there um so hopefully maybe by the i would like to say
by the end of the year that we'll definitely have uh the server available so at least people can play
chapter one or the prologue uh before crisis
this is really impressive work i mean not just reverse engineering the phones but reverse
engineering how it talks over the networks and and what's what the game is expecting to get back and
um reverse engineering how the game runs and uh also being able to uh modify it like you talked about
the maps you were able to recreate maps and you could create your own maps as well this is just fantastic
work yeah i appreciate it uh you know it's definitely been a team effort right i like to say everything's
me but um obviously now yeah there's he's the he is the well of knowledge when it comes to that game
and i know he has probably 10x the passion i do for that game even though mine is pretty high as well
uh so if there's ever any information i need or it's like there's some weird tidbits of stuff that i have
to do i can ask him and he provides it to me uh case in point is you never guess but most of the text
for that game comes from the server it's not stored locally so i have to ask now yeah to go hunt uh and
give me all the text that he finds from the videos or whatever that he gets from his sources and
really shout outs also to the gentleman who provided us the dump because he had also provided us a
lot of great videos uh that i don't think anybody's ever seen of that game that helped us uh bring in
knowledge of knowing how the game even works um like i never played the game so i don't know what
happens when i click this button right what happens after that and so if i know what happens i know what
i need to give the game right but if i don't know it really makes it my job harder and so having that
footage really uh speeds things up and so yeah it's been a great work um i mean real briefly i know i'm
the server guy but uh i work on a lot of other servers for stuff as well i know we kind of
mentioned final phase seven snowboarding leaderboards uh brought that back as well there's megaman
x1 leaderboards now if i recall at that point uh even the kingdom hearts side games i'll call them
so not the coded um all the avatar kingdom mini games all have their leaderboards in function as well at
this point um and then i think my biggest next one was uh sd gundam uh generations which is quite a
complex game that we were able to get reverse engineering working but again created a full
server for that game as well uh and now that one's fully preserved 100 functional and playable today
that's amazing and do you think you would be this far if the code had been obfuscated
uh probably not but i will tell you i worked on many games now at this point that you know i'll say 75
75 of the games i work on are probably obfuscated now but i've come in just such a way of finding the
stuff the functions the data the the code that i need to find it really doesn't bother me as much
as it did at first once you've looked at the code you kind of realize how a lot of these games work
you kind of now figured a lot of it out you can kind of just assume this is how it works and you
can find it really quickly so i think sd gundam was completely obfuscated if i recall and i was able
to make that one work um and i believe uh megamen x1 was as well but a lot of the square enix games
are not obfuscated um i think the biggest offender of that if i recall is konami or their games no i
lied it's namco it's namco is a problem yes because it was uh even the tales games i was looking at
recently which uh a big thing of mine uh they're all obfuscated and just trying to figure out how to
even get past the authentication checks in those games can be super complex um unfortunately but yeah
yeah um to the uh obfuscation point um i'm kind of like java bytecode and stuff like that is kind of like
natural to me so there have been a few times where uv has come to me like hey what does this do i'm just
like oh it does this this this and this is the input this is the output and it's like oh well
yeah i should mention i really never worked in java prior to working on katai stuff i'm not a java guy
i'm primarily a dotnet person but coding is coding at the end of the day and you kind of understand it
kind of quickly once you've seen code yeah um and so i was able to catch up pretty fast but yeah i
definitely still rely upon uh 70 here sometimes for some issues that i have yeah especially around like
some of the puzzles because i know yeah there is one you had me look at and it was like
i think it was cold stuff saga that one was a pain yeah it was like 400 lines in a single method and
it had like 100 switch cases or something like all these branches inside
and uh it was like if there was zero zero and zero zero zero zero yeah i think that was the one that you
said yeah there's a lot of servers that i've worked on that are not fully released as of yet because either
i've worked on them and then found out um we don't have data to make them work which is 99 of the case
you know it ends up being just unfortunately that when you want to play the game the game immediately
requests data that we no longer have and um tails is kind of a great point um we have data on the sp
the scratch pad for it to work but immediately when you boot up the game it wants the main menu data
and unfortunately the main menu data is overwritten um so whenever the last person who played this game
they didn't go back to the main menu when they quit the game they just exited a hard exit at the game
which saved all the data from when they were in the middle of the game so unfortunately we lose that
main menu data which means we can't even get into some of these games or even play them which is
why i have probably like 30 different servers that just sit vacant doing nothing for now
nothing yet yeah nothing yet exactly exactly we got a couple games on the horizon i'm hoping i can
resurrect some servers for uh kingdom hearts code is one of them that i have a partially working server
for just simply need the sd card data for that uh and then some other nice ones coming out eventually so
fantastic again fantastic work appreciate it um so i wanted to uh as we were talking about reverse
engineering and looking into things ellen you have some interesting stories about reverse engineering
the phones and dumping the chips and and doing all kinds of things
yes so uh this year or at the end of last year i managed to successfully recruit one of my friends
to the project it's someone who had actually been hearing about the project from me for a while but
at one point i opened up a phone that happens to have an adapter a chip adapter already made to be used
in a regular chip reader and i asked if you could help me with that because i'm not really the best at
soldering once he saw what we did with that phone he thought maybe i can do this with more phones and
so it grew and it grew and it grew the process of dumping the phone chips though is is complicated
and not just technically difficult but also physically difficult so for the phones that we cannot exploit
through a usb it's necessary to find the chip on the phone that contains the data and remove it now
these are bgas bga stands for ball grid array so rather than having the legs that stick out it has a
number of solder balls underneath the chip so you would need to heat up the motherboard so much
that all of those balls heat up and can turn into liquid solder which you can then scoop off now this
requires really quite high temperatures but not too high or else you'll burn and damage the chip
so the setup is usually we've got the motherboard that's clipped on uh with some helping hands and a hot
air gun pointing straight at the phone and you're just heating it up until it's ready and you have to
successfully detach every single ball if you miss one there's a possibility you've ruined the entire chip
just by missing one if that one ball had an important data point so it is very focused very challenging
incredibly grateful that my friend cubos has even been willing to do this at all because a lot of
people have not been that's probably part of what's um why there hasn't necessarily been more
research done on these phones because this physical dumping process is so intensive then to make things
worse um all of these chips almost all of the chips have epoxy covering underneath them so there's
an epoxy covering between the chip and the motherboard um they're in they are um given the epoxy for
durability which is important for mobile devices because when they are bouncing around in your pocket
and being used in other situations unlike a computer or a console that's just going to be staying in the
same spot they're going for maximum durability the only way this epoxy can be removed is also by heating
the chip to a high temperature and removing the uh the epoxy often this means taking the soldering iron
and heating it up and very carefully scraping it off again making sure that you don't damage any of the
pads on the chip because if you damage the wrong one even if it's just one you've ruined the chip and you
can't read anything amazingly uh cubus has dumped almost close to 100 chips perhaps and has only
uh had issues with maybe one or two that's amazing this is a very high success rate an incredible success rate
um and that's only the beginning so that's just getting a chip off of the motherboard but the thing
with these chips is that a lot of them were created in a proprietary manner just for these phones so you can't
find data sheets about these chips instead there's a lot of research and reverse engineering that is
necessary where you find chips that are similar adjacent um even if they don't have quite the
right match and so when the chips are similar but not the same there's a lot of guesswork that happens
in between so when cubus makes the chip adapters they're all inferences we don't actually know how
it's going to work until it's plugged in oftentimes there will be one wire that actually needs to go somewhere
else so you'll see lots of wire soldered on top of the adapter to connect various pins to one another
also um cutting various traces and such so why do we need the adapters it's because the most affordable
chip readers use a 48 pin dip dip zip socket let me say that again 48 pin dip zip socket so um the a lot of
the adapters that can read these chips directly the chip readers cost literally thousands of dollars
the chip readers that have this 48 pin sockets are more like 100 200 something that someone could
reasonably afford as a hobbyist so the adapters are designed to translate various chip pinouts to that
format um to add another layer to this many of the chips are multi-chip packages so they're combining
nor nand sram dram into one package with shared lines which makes it difficult to identify pin functions
or avoid conflicts without a data sheet but of course we don't have data sheets for a lot of these chips
so special care has to be taken with this with like the chip enable lines to prevent multiple dies from
outputting data simultaneously which is going to result in unreadable data and sometimes it's almost
unavoidable to deal with this if they happen to share the same there are some situations where so many things
are shared the data is just kind of garbled so cubus has had to dump multiple times and then we have to
piece the different parts of the dump together where some of it got garbled but some of it didn't and
then another one where a different part got garbled but the part garbled in the first one was clean
it reminds me of the floppy disk dumping that we do where we use flux technology and we you you can have
a floppy disk that is somewhat broken or damaged and you can copy uh the data from another of a uh another
copy of the same floppy disk so similar um mindset of preserving it there i love it piecing it together
and i haven't even i actually haven't finished the whole list of problems that occur when trying to dump
these phones another issue that comes up is with the budget chip readers themselves um most commercial
chip readers are limited by fixed reading algorithms and timing and so if the chip reader does not have
the algorithm that matches the chip you can't use it you just can't dump it so what happens in that case
well one of the things that cubus has been working on more recently is diy solutions using an arduino
to be able to read these chips they offer more flexibility but are slower and also require
additional components such as level shifters which sometimes need to be applied very carefully by hand
too many legs
and so ultimately the work requires a good deal of engineering effective work
and a very delicate handiwork to get a chance at extracting data
so one of the challenges that i don't think me or cubus expected when we went into dumping a lot of
these chips was a not a lot of support and feedback from other people knowledgeable in technical
engineering the way that conversations will usually go is we will talk about these chips how they are
proprietary how the data sheets don't exist so people and people say no they must exist they have
to exist like why would that not exist once we get past that point of proving yes this stuff is
isn't there they get to the point of well why are you wasting so much time trying to dump this very
obscure chip
what's the point i guess that's the way to i don't know um and so it's been difficult to recruit other
people who might have knowledge of this because there seem to be some some strange preconceptions
questions about the worth of a project that is this difficult um i think that in the conversation
that we're having here in this podcast the value of this is obvious we have been able to exploit
significantly more phones the usb directly because of many chip duns that was that was uh done by cubus
in order for exploits to be found you need a sample firmware a sample of the bootloader
so unless we have a chip dump we're going in completely blind and it's basically impossible to figure
out an exploit these chip dumps have allowed us to not go in blind we have been able to dump a wider variety
of phones we can now dump at least one phone from every single dokuma manufacturer at this point
we have a method for all of them which has been amazing
uh so i hope that there can be more interest and support in the hardware side
um well i hope that for everything the hacking side the hardware side there's just
it's that's a pretty small group of people who even know about all this stuff um but it's such a
fascinating and interesting challenge for people who might be wondering what they can do to use their
skills in a new and inventive manner for people who are looking to explore a realm where unlike a lot of
the other retro consoles the nintendo consoles the sega consoles sony uh etc etc it is really a lot of
unexplored technical territory and we are making new and amazing discoveries every day and i think
that's a good segue into what max is going to talk about with regards to the sideloading
yeah yeah definitely and i think the way you put it just before i go to sideloading i think the way
you stated that was really is really good because yeah it's not just against the the technical hurdles
right but it's also just a lot of preconceived notions against these games in general
because as we all know in the west flip phone games really were like snake you know people
always kind of stop at snake you know or really crappy flip phone games that run at like two frames
a second so when i so when you go up to somebody and say i'm preserving games on japanese flip phones
the first thing that comes to their mind is like oh it's snake it's crap it's not worth preserving
but well firstly all games deserve to be preserved obviously you know there's no i mean even the bad ones
right but it as we've seen in this podcast and the two previous ones there are so many gems on japanese
feature phones and all of them and there really were the precursors to modeled mobile games as we know
them especially in the way they were distributed they were distributed digitally a lot of them use the
subscription-based distribution models where new content was delivered monthly or sometimes weekly to
these games and that's not dissimilar from how server-reliant mobile games are today so in a sense
that these games are really like they're important in gaming history mobile gaming history at large
and that's why all of us here have been you know doing our best to raise awareness about these games so
i really do appreciate that point but back to what you were saying about side loading so the user xyz who
was the one who figured out this well he was he was one of two people who figured out this non-destructive
dumping method through this debug cable he figured out that on certain later devices i think it's like
the second to last panasonic imode phone ever created uh the p01f he discovered that with the debug cable
um obviously the specifics are above my head but he realized that you can side load um games onto this by
basically tricking the phone that it's a pre-installed application because on dokomo phones
in particular pre-installed apps and games don't require a sim card to run but if you have a paid
game you have to have the original sim card that you bought the game with or else the game refuses to
launch now of course when you run that through the dokomo sdk that verification is not there because
it's not on the phone but if you do want to play the game on the phone basically what xyz did was just
say okay for example i don't know rockman.exe fanta network i'm going to put it on the phone but the
phone's going to think it's pre-installed so it's not going to ask for that verification and in doing
so we were able to sideload games onto basically original hardware for the first time now there are
some limitations for some reason that there's no gyroscope inside of this which means that the motion
control games don't work they just kind of glitch out and it's possible to sideload games with sd card
data but it's it's kind of a convoluted process but it is possible but if there's one game that i
do want to highlight that's sideloadable and actually the the experience is elevated through
sideloading it it's a game that we preserved not even a week ago um is uh it's called real zero
another edition and real zero well zero the series is actually better known as fatal frame
actually no yeah yeah fatal frame yes and in the west and basically the whole thing about that
series is oh you have a camera and you take a picture of a ghost and ah scary ghost
you know so basically though they this is in 2004 they say wait a minute what if we made a game
for keitai that utilized the camera and you take a picture of an object and the ghost shows up and
then on like using the picture you took as the background you kind of immersively try to destroy
the ghost and that's exactly what we did we found a trial version of that and incubus preserved it
and from a chip dump mainly and basically what this this game does is um it looks for like a image
that's bright enough so i either for my for my demo i had to like point it out of like a light source
basically you know to make it be happy then the ghost shows up and then you you kill the ghost and
then it takes you to like a fake phone menu like they built a little mini phone menu inside there and
there are emails fake emails from the game and these emails are saying stuff like oh there are ghosts
around i'm so scared you know like i wonder what would happen if i took my camera out right now
dot dot dot you know but basically the demo ends at that point but there were 60 ghosts available for
that game and basically it's like that's an experience that you can you can play it through
the emulator you can select an image from your computer and load it but i think having it side
loadable and be able to take the picture yourself i think it's just a really cool experience
yeah and if i can add on to that like there are a bunch of these dojo phones that have you know
gyroscopes camera you know gps some of them have extra buttons other ones can detach and the sdk
emulator just can't do that so at least for scroll jamie i'm hoping to get all those kind of
control sets in because you know we have all those kind of controls now so it's just
the only way to like truly play those games is to sideload you know so
and i guess it's kind of like you have the eye toy and the wiimote you have those games that you're
never going to see on like the switch or something because like it uses that one thing that just
you know nothing ever uses
this is uh again i've said it many times during this podcast this is just amazing work by everyone
involved and i'm so so happy that you all took the time here today to talk about your your work your
progress your your chips your phones uh your javas uh your everything so we're gonna uh wrap up this
podcast here uh and as we do that i would like to invite you all to tell the audience tell our
listeners here where they can find you what you're looking to work on next and how people can help you
out in whatever endeavors that you're looking to uh continue on we can start with uh uv
yeah i appreciate it um i mean you can follow me blue sky twitter on uv app for both of those uh
or primarily just discord uh i mean the ktai wiki is the best way to probably get a hold of me um
primarily i mean if you need me for anything just mention me uh right now we're just doing a lot of
stuff with a new launcher not sure if everybody's aware of that but we've made it a lot easier for
people to play the games um so that definitely helps but doing some troubleshooting debugging and
so um great to be here thank you so much for inviting me especially as kind of being the new guy
here um it's been a it's been a thrill and a blast to be able to be a part of this journey so thanks
fantastic uh stephanie uh yeah so um i'm on blue sky as a zero shadow tail i'm also on mastodon
which is a zero shadow tail at chitter dot xyz because i'm squirrel so but i'm also in the ktai
wiki discord and there's also the squirrel jamie discord as well and there's an irc there's an irc channel
too if you like irc still but uh i'll be continuing working on basically the on nanocoat getting that
working getting that online and obviously you know they'll be testing things running things and you know
basically if you can break it then i can fix it but yeah thank you for having me here and it's been
you know really really great and i enjoyed it thank you thank you thank you ellen
so for me um there are a few things like uh like uh stephanie mentioned we have ktai wiki the ktai
wiki is a website and a wiki but we have a discord that is attached or associated with the wiki and
that's where a lot of the community is and that's where a lot of the brainstorming and invention
and reverse engineering is happening so that would be the best place for anyone interested
in japanese feature phones to go additionally i have some social media accounts under the username
unabandoned where where i post some content so i have unabandoned where on blue sky unabandoned where
on youtube and most recently unabandoned where on tiktok where i just shared a video of a panasonic
po1a that got over 500 000 views still blows my mind i don't know that's wild that's why it's a
very cool phone though if any of you happen to have a tiktok and want to see the video it is
it's a fascinating phone the hardware of these phones in addition to the software it was just amazing
awesome and last but not least max yeah so i'm not as cool as ellen i don't have a tiktok
despite being in the age demographic but i am on twitter and blue sky under uh my username rockman
cosmo i'm also on discord under the same username and yeah i mean if for future things i want to do
this year it really is just expanding you know the outreach raising more awareness and that's always
what i've been about so like i said in the past year in august i presented at an academic conference
but also at the strong museum of play on keita game preservation i like to say it was one of the
best four days of my life i got to meet jonas i got to meet ellen and it was just such a special
experience and i really got to see like how much interest there is in these games not just from game
preservationists but also academics because apparently this is an academic field that just
no one's discussing even the japanese themselves they're shocked that i care
so i am definitely gonna over the next year i'm probably gonna try to do more of those things and
maybe the next podcast a secret bigger project that might talk about but um but yeah other than that
if you do want to help out like ellen said yeah please go to keitaiwiki.com and join the discord
you don't have to be a technical mastermind to help us if you know of a lost keita game that does not
have an entry on keitai wiki yet which there are a lot then feel free to make an entry there and yeah
basically to just yeah please help us out and once again thank you so much jonas and hit save for
having us on really appreciate it thank you max and again thank you everyone for being on the show today
this is super fun i love doing this and i look forward to more of these updates as you continue to
progress i want to say thank you to all our listeners and if you want to reach out to anyone
here of course reach out to them immediately directly on the keita wiki and you can also stop
by the hit save discord and chat with us there thank you all and have a fantastic rest of your day
see you next time bye bye
